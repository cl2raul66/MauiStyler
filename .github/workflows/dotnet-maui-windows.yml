name: Build and Release .NET MAUI for Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  packages: write

jobs:
  build_and_release:
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true

    - name: Display Relevant GitVersion outputs
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore Dependencies
      run: dotnet restore

    - name: Install .NET MAUI Workload
      run: dotnet workload install maui

    - name: Decrypt PFX File
      run: |
        echo "${{ secrets.WINDOWS_PFX_FILE }}" > cert.pfx.asc
        certutil -decode cert.pfx.asc cert.pfx

    - name: Add Certificate to Store
      run: certutil -user -q -p "${{ secrets.WINDOWS_PFX_PASSWORD }}" -importpfx cert.pfx NoRoot

    - name: Calculate Version
      id: calculate_version
      run: |
        $major = [int]${{ steps.gitversion.outputs.major }}
        if ($major -eq 0) {
          $major = 1
        }
        $minor = ${{ steps.gitversion.outputs.minor }}
        $patch = ${{ steps.gitversion.outputs.patch }}
        $build = ${{ steps.gitversion.outputs.commitsSinceVersionSource }}
        $revision = ${{ steps.gitversion.outputs.preReleaseNumber }}
      
        $version = "$major.$minor.$patch"
      
        echo "version=$version" >> $GITHUB_ENV

    - name: Build and Publish Application
      run: |
        dotnet publish -f net8.0-windows10.0.19041.0 -c Release `
        -p:GenerateAppxPackageOnBuild=true `
        -p:AppxPackageSigningEnabled=true `
        -p:PackageCertificateThumbprint="${{ secrets.WINDOWS_CERT_THUMBPRINT }}" `
        -p:AppxPackageDir="${{ github.workspace }}\AppPackages" `
        -p:Version=${{ env.version }} `
        -p:ApplicationDisplayVersion=${{ env.version }} `
        -p:ApplicationVersion=${{ steps.gitversion.outputs.major }} `
        --self-contained

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      with:
        files: ${{ github.workspace }}\AppPackages\**\*.msix
        tag_name: v${{ env.version }}
        name: Release ${{ env.version }}
        body: |
          Release of version ${{ env.version }}
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
