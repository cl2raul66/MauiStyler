name: Build and Release .NET MAUI for Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Install .NET MAUI workload
      run: dotnet workload install maui
    - name: Decrypt PFX File
      run: |
        echo "${{ secrets.WINDOWS_PFX_FILE }}" > cert.pfx.asc
        certutil -decode cert.pfx.asc cert.pfx
    - name: Add Cert to Store
      run: certutil -user -q -p ${{ secrets.WINDOWS_PFX_PASSWORD }} -importpfx cert.pfx NoRoot
    - name: Build and Publish
      run: dotnet publish MauiStylerApp/MauiStylerApp.csproj -c Release -f:net8.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="${{ secrets.WINDOWS_PFX_THUMBPRINT }}"
    - name: Get Version
      id: get_version
      run: |
        $version = (Get-ChildItem -Path .\MauiStylerApp\bin\Release\net8.0-windows10.0.19041.0\win10-x64\AppPackages\ -Directory).Name -replace 'MauiStylerApp_(\d+\.\d+\.\d+\.\d+)_Test', '$1'
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
    - name: Get Previous Release
      id: get_previous_release
      env:
        VERSION_TOKEN: ${{ secrets.VERSION_TOKEN }}
      run: |
        $previousRelease = gh release list --limit 1 --json tagName,name | ConvertFrom-Json
        if ($previousRelease) {
          echo "PREVIOUS_TAG=$($previousRelease.tagName)" >> $env:GITHUB_OUTPUT
          echo "PREVIOUS_NAME=$($previousRelease.name)" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        VERSION_TOKEN: ${{ secrets.VERSION_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          Changes in this Release
          - [Add your release notes here]

          Previous Release: [${{ steps.get_previous_release.outputs.PREVIOUS_NAME }}](https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_previous_release.outputs.PREVIOUS_TAG }})
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        VERSION_TOKEN: ${{ secrets.VERSION_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .\MauiStylerApp\bin\Release\net8.0-windows10.0.19041.0\win10-x64\AppPackages\MauiStylerApp_${{ steps.get_version.outputs.VERSION }}_Test\MauiStylerApp_${{ steps.get_version.outputs.VERSION }}_x64.msix
        asset_name: MauiStylerApp_${{ steps.get_version.outputs.VERSION }}_Windows_x64.msix
        asset_content_type: application/octet-stream
    - name: Delete old releases
      env:
        VERSION_TOKEN: ${{ secrets.VERSION_TOKEN }}
      run: |
        $releases = gh api repos/{owner}/{repo}/releases | ConvertFrom-Json | Sort-Object -Property published_at -Descending
        if ($releases.Count -gt 2) {
          foreach ($release in $releases[2..$releases.Count]) {
            gh api repos/{owner}/{repo}/releases/$($release.id) -X DELETE
            Write-Host "Deleted release: $($release.name)"
          }
        }
      shell: pwsh